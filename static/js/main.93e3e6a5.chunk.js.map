{"version":3,"sources":["Components/Valor.js","Components/ListaArray.js","Components/Lista.js","Components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Valor","props","state","value","counter","handleChange","bind","event","this","setState","parseInt","target","Nombre","type","onChange","React","Component","ListaArray","Descripcion","id","listItems","map","currentt","Lista","Formulario","handleSubmit","preventDefault","onSubmit","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNA4BeA,E,kDAzBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,QAAS,GAIjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARF,E,yDAWLC,GACTC,KAAKC,SAAS,CAACN,MAAQO,SAASH,EAAMI,OAAOR,OAASO,SAASH,EAAMI,OAAOR,OAAQ,O,+BAGxF,OACQ,+BACA,gCAASK,KAAKP,MAAMW,QADpB,WAEA,2BAAOC,KAAK,OAAOV,MAAOK,KAAKN,MAAMC,MAAOW,SAAUN,KAAKH,eAC3D,6BAAK,kC,GApBGU,IAAMC,WCwBXC,EA1BG,CACd,CACIC,YAAY,cAEhB,CACIC,GAAI,EACJD,YAAa,WAEjB,CACIC,GAAI,EACJD,YAAa,QAEjB,CACIC,GAAI,EACJD,YAAa,SAEjB,CACIC,GAAI,EACJD,YAAa,QAEjB,CACIC,GAAI,EACJD,YAAa,YCnBfE,EAAYH,EAAWI,KAAI,SAACC,GAAD,OAC7B,gCAASA,EAASJ,gBA0BPK,E,kDAvBX,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAOc,EAAW,GAAGC,aAEnC,EAAKb,aAAe,EAAKA,aAAaC,KAAlB,gBAJH,E,yDAONC,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMI,OAAOR,U,+BAGnC,OACI,+BACE,wCADF,eAEE,4BAAQA,MAAOK,KAAKN,MAAMC,MAAOW,SAAUN,KAAKH,cAC/Ce,GAED,kC,GAlBQL,IAAMC,WCoBXQ,E,kDArBX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,GAEf,EAAKuB,aAAe,EAAKA,aAAanB,KAAlB,gBAJF,E,yDAMHC,GACXA,EAAMmB,mB,+BAGV,OACI,0BAAMC,SAAUnB,KAAKiB,aAAcG,UAAU,SACzC,kBAAC,EAAD,CAAOhB,OAAO,UACd,kBAAC,EAAD,CAAOA,OAAO,SACd,kBAAC,EAAD,MACA,6BACA,2BAAOC,KAAK,SAASV,MAAM,iB,GAjBdY,IAAMC,WCQhBa,MATf,WACE,OACE,yBAAKD,UAAU,OACb,wBAAIA,UAAU,UAAd,2BACA,kBAAC,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.93e3e6a5.chunk.js","sourcesContent":["import React from 'react';\n\nclass Valor extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            value: '',\n            counter: 0\n            \n        }\n\n    this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: (parseInt(event.target.value) ? parseInt(event.target.value): '')});\n    }\n    render(){\n    return(\n            <label>\n            <strong>{this.props.Nombre}</strong>&nbsp;&nbsp;\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            <br/><br/>\n            </label> \n    )\n    }\n\n}\nexport default Valor;","const ListaArray =[\n    {\n        Descripcion:\"Seleccione\"\n    },\n    {\n        id: 1,\n        Descripcion: \"Manzana\"\n    },\n    {\n        id: 2,\n        Descripcion: \"Kiwi\"\n    },\n    {\n        id: 3,\n        Descripcion: \"Mango\"\n    },\n    {\n        id: 4,\n        Descripcion: \"Pera\"\n    },\n    {\n        id: 5,\n        Descripcion: \"Guayaba\"\n    },\n\n]\nexport default ListaArray; ","import React from 'react';\nimport ListaArray from './ListaArray';\n\nconst listItems = ListaArray.map((currentt) =>\n    <option>{currentt.Descripcion}</option>);\n\nclass Lista extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: ListaArray[0].Descripcion};\n  \n      this.handleChange = this.handleChange.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n    render() {\n      return (\n          <label>\n            <strong>Item</strong>&nbsp;&nbsp;&nbsp;\n            <select value={this.state.value} onChange={this.handleChange}>\n            {listItems}\n            </select>\n            <br/>\n          </label>\n      );\n    }\n  }\n\nexport default Lista;","import React from 'react';\nimport Valor from './Valor';\nimport Lista from './Lista';\n\nclass Formulario extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={}\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    }\n      handleSubmit(event) {\n        event.preventDefault();\n      }\n    render(){\n    return(\n        <form onSubmit={this.handleSubmit} className=\"Formu\">\n            <Valor Nombre=\"Valor\"/>\n            <Valor Nombre=\"TRM \"/>\n            <Lista />\n            <br/>\n            <input type=\"submit\" value=\"Guardar\" />\n        </form>    \n    )\n    }\n}\nexport default Formulario;","import React from 'react';\nimport Formulario from './Components/Formulario'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"Header\">Prueba React para QCode</h1>\n      <Formulario />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}